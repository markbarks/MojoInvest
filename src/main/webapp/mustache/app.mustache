{{<mustache/super}}
{{$title}}Backtest | MojoInvest{{/title}}

{{$head-scripts}}
<link href="../css/filtergrid.css" rel="stylesheet" type="text/css"/>
<link href="../css/smoothness/jquery-ui-1.8.20.custom.css" rel="stylesheet" type="text/css"/>
<script src="../lib/dygraph-combined.js"></script>
<script src="../lib/tablefilter_all_min.js"></script>
<script src="http://www.google.com/jsapi"></script>
{{/head-scripts}}

{{$content}}
{{/content}}

{{$foot-scripts}}

<script>

window.App = {
    //Main application namespace
};

//JQuery set up stuff - where should this live?
(function ($) {
    $.fn.toggleDisabled = function () {
        return this.each(function () {
            this.disabled = !this.disabled;
        });
    };
})(jQuery);
$.datepicker.setDefaults({
    dateFormat: "yy-mm-dd"
});
$('#content')
        .ajaxStart(function () {
//            http://malsup.com/jquery/block/#demos
            $.blockUI({ css: {
                message: 'Please wait...',
                border: 'none',
                padding: '15px',
                backgroundColor: '#000',
                '-webkit-border-radius': '10px',
                '-moz-border-radius': '10px',
                opacity: .5,
                color: '#fff'
            } });
        })
        .ajaxStop(function () {
            $.unblockUI();
        });


tpl = {

    // Recursively pre-load all the templates for the app.
    // This implementation should be changed in a production environment. All the template files should be
    // concatenated in a single file.
    loadTemplates: function (names, callback) {

        var loadTemplate = function (index) {
            var name = names[index];
            console.log('Loading template: ' + name);
            $.get('mustache/' + name + '.mustache', function (data) {
                ich.addTemplate(name, data);
                index++;
                if (index < names.length) {
                    loadTemplate(index);
                } else {
                    callback();
                }
            }, "html");
        };

        loadTemplate(0);
    },

    // Get template by name from hash of preloaded templates
    get: function (name) {
        return this.templates[name];
    }

};

App.Params = Backbone.Model.extend({});
App.Results = Backbone.Model.extend({});
App.AppModel = Backbone.Model.extend({});


App.ParamsView = Backbone.View.extend({

    initialize: function () {
        this.model.bind("change", this.render, this);
        this.model.bind("destroy", this.close, this);
    },

    render: function () {
        $(this.el).html(ich.params(this.model.toJSON({})));
        this.$("#fromDate").datepicker();
        this.$("#toDate").datepicker();
        this.$("input[name=relativeStrengthStyle][value=" + this.model.get("relativeStrengthStyle") + "]")
                .attr('checked', 'checked');

        this.$("#ma1").val(this.model.get("ma1"));
        this.$("#ma2").val(this.model.get("ma2"));
        this.$("#roc").val(this.model.get("roc"));
        this.$("#alpha").val(this.model.get("alpha"));

        //TODO: Consolidate this logic with the rsRadioClicked logic below
        switch (this.$('input[name=relativeStrengthStyle]:checked', '#relativeStrength').val()) {
            case "MA" :
                this.$('#ma1').attr('disabled', false);
                this.$('#ma2').attr('disabled', false);
                this.$('#roc').attr('disabled', true);
                this.$('#alpha').attr('disabled', true);
                break;
            case "ROC" :
                this.$('#ma1').attr('disabled', true);
                this.$('#ma2').attr('disabled', true);
                this.$('#roc').attr('disabled', false);
                this.$('#alpha').attr('disabled', true);
                break;
            case "ALPHA" :
                this.$('#ma1').attr('disabled', true);
                this.$('#ma2').attr('disabled', true);
                this.$('#roc').attr('disabled', true);
                this.$('#alpha').attr('disabled', false);
                break;
        }


        this.$("#stdDev").val(this.model.get("stdDev"));
        this.$("#riskAdjusted").attr('checked', this.model.get("riskAdjusted"));
        this.$("#stdDev").attr('disabled', !this.model.get("riskAdjusted"));
        this.$("#tradeEquityCurve").attr('checked', this.model.get("tradeEquityCurve"));
        this.$("#equityCurveWindow").attr('disabled', !this.model.get("tradeEquityCurve"));
        this.$("#useSafeAsset").attr('checked', this.model.get("useSafeAsset"));
        this.$("#safeAsset").attr('disabled', !this.model.get("useSafeAsset"));
        //TODO: Need to disable and uncheck useSafeAsset when trade equity curve is unchecked
        return this;
    },

    events: {
        "click input[name='relativeStrengthStyle']:radio": "rsRadioClicked",
        "click #runbacktest": "runBacktest"
    },

    rsRadioClicked: function (event) {
        // find out which radio button was clicked and
        // disable/enable appropriate input elements
        switch (event.currentTarget.id) {
            case "maRatioRadio" :
                this.$('#ma1').attr('disabled', false);
                this.$('#ma2').attr('disabled', false);
                this.$('#roc').attr('disabled', true);
                this.$('#alpha').attr('disabled', true);
                break;
            case "rocRadio" :
                this.$('#ma1').attr('disabled', true);
                this.$('#ma2').attr('disabled', true);
                this.$('#roc').attr('disabled', false);
                this.$('#alpha').attr('disabled', true);
                break;
            case "alphaRadio" :
                this.$('#ma1').attr('disabled', true);
                this.$('#ma2').attr('disabled', true);
                this.$('#roc').attr('disabled', true);
                this.$('#alpha').attr('disabled', false);
                break;
        }

    },

    runBacktest: function (event) {

        this.model.set({
            "initialInvestment": $('#initialInvestment').val(),
            "transactionCost": $('#transactionCost').val(),
            "portfolioSize": $('#portfolioSize').val(),
            "relativeStrengthStyle": $('input[name=relativeStrengthStyle]:checked', '#relativeStrength').val(),
            "ma1": $('#ma1').val(),
            "ma2": $('#ma2').val(),
            "roc": $('#roc').val(),
            "alpha": $('#alpha').val(),
            "rebalanceFrequency": $('#rebalanceFrequency').val(),
            "minHoldingPeriod": $('#minHoldingPeriod').val(),
            "castOff": $('#castOff').val(),
            "riskAdjusted": $('#riskAdjusted').is(':checked'),
            "stdDev": $('#stdDev').val(),
            "tradeEquityCurve": $('#tradeEquityCurve').is(':checked'),
            "equityCurveWindow": $('#equityCurveWindow').val(),
            "useSafeAsset": $('#useSafeAsset').is(':checked'),
            "safeAsset": $('#safeAsset').val(),
            "fromDate": $('#fromDate').val(),
            "toDate": $('#toDate').val(),
            "creationDate": $('#fromDate').val()
        });
        $.ajax({
            type: 'POST',
            url: "api/backtest",
            data: JSON.stringify(this.model),
            success: this.success,
            error: this.error,
            contentType: "application/json;charset=utf-8",
            dataType: 'json'
        });

        console.log(JSON.stringify(this.model));
        return false;
    },

    success: function (data) {
        App.results = new App.Results(data);
        App.router.navigate('results', true);
    },

    error: function (jqXHR, textStatus, errorThrown) {
        console.log(jqXHR, textStatus, errorThrown);
        alert(jqXHR + " " + textStatus + " " + errorThrown);
    }

});

App.UniverseView = Backbone.View.extend({
    initialize: function () {
        this.model.bind("change:universe", this.render, this);
    },

    render: function () {
        $(this.el).html(ich.universe(this.model.toJSON({})));
        return this;
    }

});

App.FundsView = Backbone.View.extend({

    initialize: function () {
    },

    render: function () {
        $(this.el).html(ich.funds(App));
        this.updateCheckedRows();
        return this;
    },
    events: {
        "click input[name='includeFundCheck']:checkbox": "includeFundClicked",
        "click input[name='includeAllFundsCheck']:checkbox": "includeAllFundsClicked"
    },

    updateCheckedRows: function () {
        var universe = App.params.get("universe");
        this.$("input[name='includeFundCheck']:checkbox").each(function (index) {
            if ($.inArray($(this).val(), universe) != -1) {
                $(this).attr("checked", true);
            }
        });
    },

    includeFundClicked: function (event) {
        var fund = event.currentTarget.value;
        var universe = App.params.get("universe");
        var index = $.inArray(fund, universe);
        if (index == -1) {
            universe.push(fund);
        } else {
            universe.splice(index, 1);
        }
        //Trigger a change event on the universe view.
        // Not automatic because params.universe is not a collection
        //Not sure why model.change() is not working-
        // http://stackoverflow.com/questions/8280790/backbone-js-model-not-firing-events
        App.params.trigger('change:universe');
    },

    addToUniverse: function (fund, universe) {
        var index = $.inArray(fund, universe);
        if (index == -1) {
            universe.push(fund);
        } else {
            universe.splice(index, 1);
        }
        return index;
    },

    includeAllFundsClicked: function (event) {
        var universe = App.params.get("universe");
        var filteredData = this.fundTF.GetFilteredData(false);
        if (filteredData.length == 0) {
            var i = 0;
            //No rows have been selected, so use jquery to iterate all rows
            var thiz = this;
            $('#universe_table tr').each(function () {
                if (i > 1) {
                    var fund = $(this).children()[1].innerHTML;
                    thiz.addToUniverse(fund, universe);
                }
                i++;
            })
        } else {
            for (var j = 0; j < filteredData.length; j++) {
                var fund = filteredData[j][1][1];
                var index = this.addToUniverse(fund, universe);
            }
        }

        App.params.trigger('change:universe');
        this.updateCheckedRows();
    },

    setFilterGrid: function () {
        var table_Props = {
            col_0: "none",
            col_3: "select",
            col_4: "select",
            col_5: "select",
            col_6: "select",
            col_7: "select",
            display_all_text: " [ Show all ] ",
            sort_select: true
        };
        this.fundTF = setFilterGrid("universe_table", table_Props);
    }

});

App.ChartView = Backbone.View.extend({

    render: function () {
        $(this.el).html(ich.results({stats: this.model.get("stats"),
            transactions: this.model.get("transactions")}));
        console.log("ChartView render");
        google.load('visualization', '1', {'callback': this.drawVisualization,
            'packages': ['linechart']});
        return this;
    },

    drawVisualization: function () {
        var data = new google.visualization.DataTable(App.results.get('dataTable'));
        new Dygraph.GVizChart(this.$('#chart').get(0)).draw(data,
                {
                    showRangeSelector: true,
                    displayAnnotations: true,
                    connectSeparatedPoints: true
                });
    }

});


Backbone.View.prototype.close = function () {
    console.log('Closing view ' + this);
    if (this.beforeClose) {
        this.beforeClose();
    }
    this.remove();
    this.unbind();
};

var AppRouter = Backbone.Router.extend({

    initialize: function () {
        console.log("initializing AppRouter");
    },

    routes: {
        "": "params",
        "results": "results"
    },

    params: function () {
        console.log("Showing params");
        var params = new App.ParamsView({model: App.params});
        var funds = new App.FundsView();
        App.router.showViews("#content", [params, funds]);

        //Call to set up fund filter grid must be made after view has been rendered
        funds.setFilterGrid();
    },

    results: function () {
        console.log("Showing results");
        var views = [new App.ChartView({model: App.results})];
        App.router.showViews("#content", views);
    },

    showViews: function (selector, views) {
        if (this.currentViews) {
            for (var i = 0; i < this.currentViews.length; i++) {
                this.currentViews[i].close();
            }
        }
        for (var j = 0; j < views.length; j++) {
            $(selector).append(views[j].render().el);
        }
        this.currentViews = views;
    }

});

</script>


<script>

    console.log("bootstrapping models");

    App.params = new App.Params({{params}});
    App.funds = {{funds}};


    //Load templates is async because of http requests
    tpl.loadTemplates(['params', 'funds', 'universe', 'results'], function () {
        App.router = new AppRouter();
        Backbone.history.start();
    });

</script>


{{/foot-scripts}}
{{/mustache/super}}